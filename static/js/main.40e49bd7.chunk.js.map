{"version":3,"sources":["constants/LegendColors.js","components/Map.js","components/Legend.js","components/CountryCard.js","App.js","index.js"],"names":["NumValues","ColorValues","memo","setTooltipContent","setSelectedCountry","countryData","mostCases","normalizeCountry","getColour","scaleLinear","domain","range","fill","name","cases","find","country","Country","TotalConfirmed","data-tip","height","window","innerHeight","width","innerWidth","zoom","geography","geographies","map","geo","properties","stroke","strokeWidth","key","rsmKey","onClick","abr","data","onMouseEnter","onMouseLeave","style","hover","outline","Legend","labelBar","useRef","useState","setLabelBarHeight","numValues","setNumValues","useEffect","current","clientHeight","className","ref","slice","reverse","numVal","index","background","justifyContent","fontSize","backgroundColor","CountryCard","clear","src","alt","color","TotalDeaths","TotalRecovered","NewConfirmed","NewDeaths","NewRecovered","prev","next","App","tooltip","setTooltip","countries","setCountries","setLastUpdated","setMostCases","selectedCountry","fetch","then","res","json","Date","Countries","sort","a","b","most","length","Map","input","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40e49bd7.chunk.js","sourcesContent":["export const NumValues = [0, 100, 1000, 10000];\r\nexport const ColorValues = [\r\n  \"#39b54a\",\r\n  \"#d8d52b\",\r\n  \"#eac435\",\r\n  \"#f56416\",\r\n  \"#ff0000\"\r\n];\r\n","import React, { useState, useEffect, memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport { NumValues, ColorValues } from \"./../constants/LegendColors\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/deldersveld/topojson/master/world-countries.json\";\r\n// \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst MapChart = ({\r\n  setTooltipContent,\r\n  setSelectedCountry,\r\n  countryData,\r\n  mostCases,\r\n  normalizeCountry\r\n}) => {\r\n  const getColour = scaleLinear()\r\n    .domain([...NumValues, mostCases])\r\n    .range(ColorValues);\r\n\r\n  const fill = (name) => {\r\n    let cases = countryData.find(\r\n      (country) => country.Country === normalizeCountry(name)\r\n    );\r\n    if (cases) {\r\n      return getColour(cases.TotalConfirmed);\r\n    }\r\n    return \"black\";\r\n  };\r\n\r\n  return (\r\n    <ComposableMap\r\n      data-tip=\"\"\r\n      height={window.innerHeight}\r\n      width={window.innerWidth}\r\n    >\r\n      <ZoomableGroup zoom={2}>\r\n        <Geographies geography={geoUrl}>\r\n          {({ geographies }) =>\r\n            geographies.map((geo) => {\r\n              const { name } = geo.properties;\r\n              return (\r\n                <Geography\r\n                  stroke=\"#000\"\r\n                  strokeWidth={0.05}\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onClick={() =>\r\n                    setSelectedCountry({\r\n                      abr: geo.properties[\"Alpha-2\"],\r\n                      data: countryData.find(\r\n                        (country) => country.Country === normalizeCountry(name)\r\n                      )\r\n                    })\r\n                  }\r\n                  onMouseEnter={() => {\r\n                    setTooltipContent(name);\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  fill={fill(name)}\r\n                  style={{\r\n                    hover: {\r\n                      fill: \"#5eaeff\",\r\n                      outline: \"none\"\r\n                    }\r\n                  }}\r\n                />\r\n              );\r\n            })\r\n          }\r\n        </Geographies>\r\n      </ZoomableGroup>\r\n    </ComposableMap>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport \"./Legend.scss\";\r\nimport { ColorValues, NumValues } from \"../constants/LegendColors\";\r\n\r\nexport const Legend = ({ mostCases }) => {\r\n  const labelBar = useRef();\r\n  const [labelBarHeight, setLabelBarHeight] = useState(0);\r\n  const [numValues, setNumValues] = useState([...NumValues]);\r\n\r\n  useEffect(() => {\r\n    setLabelBarHeight(labelBar.current.clientHeight);\r\n  }, [labelBar]);\r\n\r\n  useEffect(() => {\r\n    if (mostCases) setNumValues([...numValues, mostCases]);\r\n  }, [mostCases]);\r\n\r\n  return (\r\n    <div className=\"legend\">\r\n      <div className=\"legendTitle\">\r\n        <span>Total Confirmed Cases</span>\r\n      </div>\r\n      <div className=\"legendContainer\">\r\n        <div className=\"labels\" ref={labelBar}>\r\n          {numValues\r\n            .slice(0)\r\n            .reverse()\r\n            .map((numVal, index) => (\r\n              <div className=\"label\" key={index}>\r\n                {numVal + \" - \"}\r\n              </div>\r\n            ))}\r\n        </div>\r\n        <div\r\n          className=\"colorBar\"\r\n          style={{ background: `linear-gradient(to top, ${ColorValues})` }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"legendContainer\" style={{ height: 30 }}>\r\n        <div className=\"labels\" style={{ justifyContent: \"center\" }}>\r\n          <div className=\"label\" style={{ fontSize: 14 }}>\r\n            No data -{\" \"}\r\n          </div>\r\n        </div>\r\n        <div className=\"colorBar\" style={{ backgroundColor: \"black\" }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { memo } from \"react\";\r\nimport \"./CountryCard.scss\";\r\n\r\nconst Card = ({ abr, data, clear }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <button onClick={clear}>X</button>\r\n      {data ? (\r\n        <>\r\n          <div className=\"cardTitle\">\r\n            <img\r\n              src={`https://www.countryflags.io/${abr}/flat/64.png`}\r\n              alt={`${data.Country} flag`}\r\n            />\r\n            <span>{data.Country}</span>\r\n          </div>\r\n          <div className=\"cardContent\">\r\n            <div className=\"totals\">\r\n              <p>{`Total Confirmed: ${data.TotalConfirmed}`}</p>\r\n              <p\r\n                style={{ color: \"#ff0000\" }}\r\n              >{`Total Deaths: ${data.TotalDeaths}`}</p>\r\n              <p\r\n                style={{ color: \"#39b54a\" }}\r\n              >{`Total Recovered: ${data.TotalRecovered}`}</p>\r\n            </div>\r\n            <div className=\"new\">\r\n              <p>{`New Confirmed: ${data.NewConfirmed}`}</p>\r\n              <p\r\n                style={{ color: \"#ff0000\" }}\r\n              >{`New Deaths: ${data.NewDeaths}`}</p>\r\n              <p\r\n                style={{ color: \"#39b54a\" }}\r\n              >{`New Recovered: ${data.NewRecovered}`}</p>\r\n            </div>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div className=\"cardTitle\">No data available for that Country</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction arePropsEqual(prev, next) {\r\n  return prev.data === next.data;\r\n}\r\n\r\nexport const CountryCard = memo(Card, arePropsEqual);\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Map from \"./components/Map\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Legend } from \"./components/Legend\";\nimport { CountryCard } from \"./components/CountryCard\";\n\nfunction App() {\n  const [tooltip, setTooltip] = useState(\"\");\n  const [countries, setCountries] = useState([]);\n  const [lastUpdated, setLastUpdated] = useState();\n  const [mostCases, setMostCases] = useState();\n  const [selectedCountry, setSelectedCountry] = useState();\n\n  const normalizeCountry = (input) => {\n    switch (input) {\n      case \"United States of America\":\n        return \"US\";\n      case \"Czech Republic\":\n        return \"Czechia\";\n      case \"Democratic Republic of the Congo\":\n        return \"Republic of the Congo\";\n      default:\n        return input;\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"https://api.covid19api.com/summary\")\n      .then((res) => res.json())\n      .then(({ Date, Countries }) => {\n        Countries.sort((a, b) => a.TotalConfirmed > b.TotalConfirmed);\n        setLastUpdated(Date);\n        setCountries(Countries);\n      });\n  }, []);\n\n  useEffect(() => {\n    let most =\n      countries.length > 0\n        ? countries.sort((a, b) => {\n            return b.TotalConfirmed - a.TotalConfirmed;\n          })[0].TotalConfirmed\n        : null;\n    setMostCases(most);\n  }, [countries, mostCases]);\n\n  const handleSelectedClear = () => {\n    setSelectedCountry();\n  };\n\n  return (\n    <div>\n      {countries.length > 0 ? (\n        <>\n          {selectedCountry ? (\n            <CountryCard {...selectedCountry} clear={handleSelectedClear} />\n          ) : null}\n\n          <Legend mostCases={mostCases} />\n          <ReactTooltip>{tooltip}</ReactTooltip>\n          <Map\n            setTooltipContent={setTooltip}\n            countryData={countries}\n            mostCases={mostCases}\n            setSelectedCountry={setSelectedCountry}\n            selectedCountry={selectedCountry}\n            normalizeCountry={normalizeCountry}\n          />\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}