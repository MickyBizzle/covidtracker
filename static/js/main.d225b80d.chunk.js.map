{"version":3,"sources":["constants/LegendColors.js","components/Map.js","components/Legend.js","App.js","index.js"],"names":["NumValues","ColorValues","memo","setTooltipContent","setSelectedCountry","countryData","mostCases","normalizeCountry","getColour","scaleLinear","domain","range","fill","name","cases","find","country","Country","TotalConfirmed","data-tip","height","window","innerHeight","width","innerWidth","zoom","geography","geographies","map","geo","properties","stroke","strokeWidth","key","rsmKey","onClick","onMouseEnter","onMouseLeave","style","hover","outline","Legend","labelBar","useRef","useState","setLabelBarHeight","numValues","setNumValues","useEffect","current","clientHeight","className","ref","slice","reverse","numVal","index","background","App","content","setContent","countries","setCountries","setLastUpdated","setMostCases","selectedCountry","console","log","fetch","then","res","json","Date","Countries","sort","a","b","most","length","Map","input","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d225b80d.chunk.js","sourcesContent":["export const NumValues = [0, 100, 1000, 10000];\r\nexport const ColorValues = [\r\n  \"#39b54a\",\r\n  \"#d8d52b\",\r\n  \"#eac435\",\r\n  \"#f56416\",\r\n  \"#ff0000\"\r\n];\r\n","import React, { useState, useEffect, memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport { NumValues, ColorValues } from \"./../constants/LegendColors\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/deldersveld/topojson/master/world-countries.json\";\r\n// \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst handleCountryClick = (geo) => {\r\n  console.log(geo.properties);\r\n};\r\n\r\nconst MapChart = ({\r\n  setTooltipContent,\r\n  setSelectedCountry,\r\n  countryData,\r\n  mostCases,\r\n  normalizeCountry\r\n}) => {\r\n  const getColour = scaleLinear()\r\n    .domain([...NumValues, mostCases])\r\n    .range(ColorValues);\r\n\r\n  const fill = (name) => {\r\n    let cases = countryData.find(\r\n      (country) => country.Country === normalizeCountry(name)\r\n    );\r\n    if (cases) {\r\n      return getColour(cases.TotalConfirmed);\r\n    }\r\n    return \"black\";\r\n  };\r\n\r\n  return (\r\n    <ComposableMap\r\n      data-tip=\"\"\r\n      height={window.innerHeight}\r\n      width={window.innerWidth}\r\n    >\r\n      <ZoomableGroup zoom={2}>\r\n        <Geographies geography={geoUrl}>\r\n          {({ geographies }) =>\r\n            geographies.map((geo) => {\r\n              const { name } = geo.properties;\r\n              return (\r\n                <Geography\r\n                  stroke=\"#000\"\r\n                  strokeWidth={0.05}\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onClick={() => setSelectedCountry(normalizeCountry(name))}\r\n                  onMouseEnter={() => {\r\n                    setTooltipContent(name);\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  fill={fill(name)}\r\n                  style={{\r\n                    hover: {\r\n                      fill: \"#5eaeff\",\r\n                      outline: \"none\"\r\n                    }\r\n                  }}\r\n                />\r\n              );\r\n            })\r\n          }\r\n        </Geographies>\r\n      </ZoomableGroup>\r\n    </ComposableMap>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport \"./Legend.scss\";\r\nimport { ColorValues, NumValues } from \"../constants/LegendColors\";\r\n\r\nexport const Legend = ({ mostCases }) => {\r\n  const labelBar = useRef();\r\n  const [labelBarHeight, setLabelBarHeight] = useState(0);\r\n  const [numValues, setNumValues] = useState([...NumValues]);\r\n\r\n  useEffect(() => {\r\n    setLabelBarHeight(labelBar.current.clientHeight);\r\n  }, [labelBar]);\r\n\r\n  useEffect(() => {\r\n    if (mostCases) setNumValues([...numValues, mostCases]);\r\n  }, [mostCases]);\r\n\r\n  return (\r\n    <div className=\"legend\">\r\n      <div className=\"legendTitle\">Legend</div>\r\n      <div className=\"legendContainer\">\r\n        <div className=\"labels\" ref={labelBar}>\r\n          {numValues\r\n            .slice(0)\r\n            .reverse()\r\n            .map((numVal, index) => (\r\n              <div className=\"label\" key={index}>\r\n                {numVal + \" - \"}\r\n              </div>\r\n            ))}\r\n        </div>\r\n        <div\r\n          className=\"colorBar\"\r\n          style={{ background: `linear-gradient(to top, ${ColorValues})` }}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Map from \"./components/Map\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Legend } from \"./components/Legend\";\n\nfunction App() {\n  const [content, setContent] = useState(\"\");\n  const [countries, setCountries] = useState([]);\n  const [lastUpdated, setLastUpdated] = useState();\n  const [mostCases, setMostCases] = useState();\n  const [selectedCountry, setSelectedCountry] = useState();\n\n  const normalizeCountry = (input) => {\n    switch (input) {\n      case \"United States of America\":\n        return \"US\";\n      case \"Czech Republic\":\n        return \"Czechia\";\n      case \"Democratic Republic of the Congo\":\n        return \"Republic of the Congo\";\n      default:\n        return input;\n    }\n  };\n\n  useEffect(() => {\n    console.log(selectedCountry);\n  }, [selectedCountry]);\n\n  useEffect(() => {\n    fetch(\"https://api.covid19api.com/summary\")\n      .then((res) => res.json())\n      .then(({ Date, Countries }) => {\n        Countries.sort((a, b) => a.TotalConfirmed > b.TotalConfirmed);\n        setLastUpdated(Date);\n        setCountries(Countries);\n      });\n  }, []);\n\n  useEffect(() => {\n    let most =\n      countries.length > 0\n        ? countries.sort((a, b) => {\n            return b.TotalConfirmed - a.TotalConfirmed;\n          })[0].TotalConfirmed\n        : null;\n    setMostCases(most);\n  }, [countries, mostCases]);\n\n  return (\n    <div>\n      {countries.length > 0 ? (\n        <>\n          <Legend mostCases={mostCases} />\n          <ReactTooltip>{content}</ReactTooltip>\n          <Map\n            setTooltipContent={setContent}\n            countryData={countries}\n            mostCases={mostCases}\n            setSelectedCountry={setSelectedCountry}\n            selectedCountry={selectedCountry}\n            normalizeCountry={normalizeCountry}\n          />\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}